function! s:wait_has_key(obj, name) abort
  let timeout_sec = 5
  let i = 0
  while i < timeout_sec * 100
    sleep 10m
    if has_key(a:obj, a:name)
      " need state update
      sleep 10m
      return
    endif
    let i += 1
  endwhile
  throw printf("s:wait_has_key(): After %ds, the given object does not have key '%s': %s", timeout_sec, a:name, a:obj)
endfunction

function! s:resolver(resolve, reject) abort
  call a:resolve('ok')
endfunction

function! s:rejector(resolve, reject) abort
  call a:reject('error')
endfunction

Describe Async.Promise
  Before all
    let P = vital#vital#import('Async.Promise')

    " Constants
    let PENDING = 0
    let FULFILLED = 1
    let REJECTED = 2

    " Utilities
    let Wait = {ms -> P.new({res -> timer_start(ms, res)})}
    let RejectAfter = {ms -> P.new({_, rej -> timer_start(ms, rej)})}
  End

  Describe .new()
    It should create a Promise object with proper state synchronously
      for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty')]
        let p = P.new({resolve -> resolve(l:Val)})
        Assert Equals(p._state, FULFILLED)
        Assert HasKey(p, '_vital_promise')

        let p = P.new({_, reject -> reject(l:Val)})
        Assert Equals(p._state, REJECTED)
        Assert HasKey(p, '_vital_promise')

        unlet l:Val
      endfor
    End

    It should make settled Promise with v:null when no argument is given to resolve()/reject()
      let l = l:
      call P.new({resolve -> resolve()}).then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, v:null)

      unlet result
      call P.new({_, reject -> reject()}).catch({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, v:null)
    End

    It should create a rejected Promise object when an exception was thrown
      let l = l:
      let p = P.new({-> execute('throw "ERROR"')})
      Assert Equals(p._state, REJECTED)
      call p.catch({exc -> extend(l, {'err': exc})})
      call s:wait_has_key(l, 'err')
      Assert HasKey(err, 'exception')
      Assert HasKey(err, 'throwpoint')
      Assert Equals(err.exception, 'ERROR')
      Assert NotEmpty(err.throwpoint)
      unlet err

      let p = P.new({-> execute('echom dummy')})
      Assert Equals(p._state, REJECTED)
      call p.catch({exc -> extend(l, {'err': exc})})
      call s:wait_has_key(l, 'err')
      Assert HasKey(err, 'exception')
      Assert HasKey(err, 'throwpoint')
      Assert Match(err.exception, '^Vim(echomsg):E121:')
      Assert NotEmpty(err.throwpoint)
    End

    It should do nothing when calling resolve()/reject() after resolved
      let l = l:

      let p = P.new({resolve -> resolve(42) || resolve(99)})
      Assert Equals(p._state, FULFILLED)
      call p.then({v -> extend(l, {'result' : v})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 42)
      unlet result

      let p = P.new({resolve, reject -> resolve(52) || reject(99)})
      Assert Equals(p._state, FULFILLED)
      call p.then({v -> extend(l, {'result' : v})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 52)
    End

    It should do nothing when calling resolve()/reject() after rejected
      let l = l:

      let p = P.new({resolve, reject -> reject(42) || resolve(99)})
      Assert Equals(p._state, REJECTED)
      call p.catch({v -> extend(l, {'reason' : v})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason, 42)
      unlet reason

      let p = P.new({_, reject -> reject(52) || reject(99)})
      Assert Equals(p._state, REJECTED)
      call p.catch({v -> extend(l, {'reason' : v})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason, 52)
    End

    It should ignore thrown exception when the Promise is already settled
      let l = l:
      call P.new({resolve -> resolve('ok') || execute('throw "HELLO"')}).then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 'ok')
      unlet result
      call P.new({_, reject -> reject('error') || execute('throw "HELLO"')}).catch({x -> extend(l, {'reason' : x})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason, 'error')
    End

    It should be pending forever when neither resolve() nor reject() is called
      let l = l:
      let done = 0
      let p = P.new({-> 42})
      Assert Equals(p._state, PENDING)
      let p = p.then({-> extend(l, {'done' : 1})})
      let p = p.catch({-> extend(l, {'done' : 2})})
      sleep 30m
      Assert Equals(p._state, PENDING)
      Assert Equals(done, 0)
    End

    It can take funcref as constructor
      let l = l:
      call P.new(function('s:resolver')).then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 'ok')
      unlet result
      call P.new(function('s:rejector')).catch({x -> extend(l, {'reason' : x})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason, 'error')
    End

    It should assimilate when fulfilled Promise is given to resolve()
      let p = P.new({resolve -> resolve(P.resolve('ok'))})
      Assert Equals(p._state, FULFILLED)
      let l = l:
      call p.then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 'ok')
    End

    It should not create resolved Promise with rejected Promise
      let p = P.new({resolve -> resolve(P.reject('error'))})
      Assert Equals(p._state, REJECTED)
      let l = l:
      call p.catch({x -> extend(l, {'reason' : x})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason, 'error')
    End
  End

  Describe Promise object
    Describe .then()
      It should call its callback asynchronously
        let l = l:
        for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty')]
          let p = P.new({resolve -> resolve(Val)})
          Assert Equals(p._state, FULFILLED)
          let p2 = p.then({x -> x}).then({r -> extend(l, {'Result' : r})})
          Assert False(exists('l:Result'))
          call s:wait_has_key(l, 'Result')
          Assert Equals(Result, Val)
          Assert Equals(p2._state, FULFILLED)
          unlet l:Result
          unlet l:Val
        endfor
      End

      It should be chainable
        let l = l:
        let p = P.resolve(42).then({r -> P.resolve(r + 42)}).then({r -> extend(l, {'result' : r})})
        call s:wait_has_key(l, 'result')
        Assert Equals(result, 84)
        Assert Equals(p._state, FULFILLED)
      End

      It should be chainable asynchronously
        let l = l:
        let p = Wait(50).then({-> Wait(50)}).then({-> extend(l, {'result' : 42})})
        Assert Equals(p._state, PENDING)
        call s:wait_has_key(l, 'result')
        Assert Equals(result, 42)
        Assert Equals(p._state, FULFILLED)
      End

      It should resolve with funcref directly
        let l = l:
        let p = P.resolve(50).then(Wait).then({-> extend(l, {'result' : 42})})
        Assert Equals(p._state, PENDING)
        call s:wait_has_key(l, 'result')
        Assert Equals(result, 42)
        Assert Equals(p._state, FULFILLED)
      End

      It should accept to resolve multiple times
        let l = l:
        let p = P.resolve(42)

        let p2 = p.then({v -> extend(l, {'value' : v + 10})})
        call s:wait_has_key(l, 'value')
        Assert Equals(value, 52)
        Assert Equals(p2._state, FULFILLED)
        unlet value

        let p2 = p.then({v -> extend(l, {'value' : v + 20})})
        call s:wait_has_key(l, 'value')
        Assert Equals(value, 62)
        Assert Equals(p2._state, FULFILLED)
      End

      It should accept to resolve multiple times asynchronously
        let l = l:
        let value = 100
        let p1 = Wait(50).then({-> 100})
        let p2 = p1.then({v -> extend(l, {'value' : l.value + v, 'ok1': v:true})})
        let p3 = p1.then({v -> extend(l, {'value' : l.value + v, 'ok2': v:true})})
        for p in [p1, p2, p3]
          Assert Equals(p._state, PENDING)
        endfor
        call s:wait_has_key(l, 'ok1')
        call s:wait_has_key(l, 'ok2')
        for p in [p1, p2, p3]
          Assert Equals(p._state, FULFILLED)
        endfor
        Assert Equals(value, 300)
      End

      It should reject Promise when an exception was thrown
        let l = l:

        let p = P.resolve(42).then({-> execute('throw "ERROR"')})
        call p.catch({exc -> extend(l, {'err': exc})})
        call s:wait_has_key(l, 'err')
        Assert Equals(p._state, REJECTED)
        Assert HasKey(err, 'exception')
        Assert HasKey(err, 'throwpoint')
        Assert Equals(err.exception, 'ERROR')
        unlet err

        let p = P.resolve(42).then({-> execute('echom dummy')})
        call p.catch({exc -> extend(l, {'err': exc})})
        call s:wait_has_key(l, 'err')
        Assert Equals(p._state, REJECTED)
        Assert HasKey(err, 'exception')
        Assert HasKey(err, 'throwpoint')
        Assert Match(err.exception, '^Vim(echomsg):E121:')
      End

      It can omit all parameters
        let l = l:
        call P.resolve(42).then().then().then({x -> extend(l, {'result' : x})})
        call s:wait_has_key(l, 'result')
        Assert Equals(result, 42)
      End

      It should stop chain as soon as Promise is rejected
        let p = P.resolve(42).then({x -> x + 1}).then({x -> execute('throw x')}).then({x -> x + 1})
        let l = l:
        call p.catch({x -> extend(l, {'reason' : x})})
        call s:wait_has_key(l, 'reason')
        Assert Equals(p._state, REJECTED)
        Assert Equals(reason.exception, 43)
      End

      It can take rejection handler at 2nd parameter
        let l = l:
        let p = P.reject(42).then({x -> extend(l, {'did' : 'resolve'})}, {x -> extend(l, {'did' : 'reject'})})
        call s:wait_has_key(l, 'did')
        Assert Equals(p._state, FULFILLED)
        Assert Equals(did, 'reject')
      End
    End

    Describe .catch()
      It calls its callback asynchronously
        let l = l:
        for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty')]
          let p = P.new({_, reject -> reject(Val)})
          let p2 = p.then({-> extend(l, {'Result' : 'Error: resolved to .then'})}).catch({v -> extend(l, {'Result' : v})})
          Assert False(exists('l:Result'))
          call s:wait_has_key(l, 'Result')
          Assert Equals(Result, Val)
          Assert Equals(p._state, REJECTED)
          Assert Equals(p2._state, FULFILLED)
          unlet l:Val
          unlet l:Result
        endfor
      End

      It is called when an exceptioin is thrown in upstream
        let l = l:
        let p = P.new({-> execute('throw 42')})
          \.catch({r -> extend(l, {'reason' : r})})
        call s:wait_has_key(l, 'reason')
        Assert Equals(reason.exception, 42)
        Assert Equals(p._state, FULFILLED)
      End

      It resolves thenable object
        let l = l:
        let p = P.reject(42).catch({r -> P.resolve(r + 42)}).then({r -> extend(l, {'reason' : r})})
        call s:wait_has_key(l, 'reason')
        Assert Equals(reason, 84)
        Assert Equals(p._state, FULFILLED)
      End

      It resolves thenable object asynchronously
        let l = l:
        let p = RejectAfter(50).catch({-> RejectAfter(50)}).catch({-> extend(l, {'reason' : 42})})
        Assert Equals(p._state, PENDING)
        call s:wait_has_key(l, 'reason')
        Assert Equals(reason, 42)
        Assert Equals(p._state, FULFILLED)
      End

      It resolves by funcref directly
        let l = l:
        let p = P.reject(50).catch(Wait).then({-> extend(l, {'result' : 42})})
        Assert Equals(p._state, PENDING)
        call s:wait_has_key(l, 'result')
        Assert Equals(result, 42)
        Assert Equals(p._state, FULFILLED)
      End

      It should resolve the same rejected promise multiple times
        let l = l:
        let p = P.reject(42)
        let p2 = p.catch({v -> extend(l, {'value' : v + 10})})
        call s:wait_has_key(l, 'value')
        Assert Equals(value, 52)
        Assert Equals(p2._state, FULFILLED)
        unlet value
        let p2 = p.catch({v -> extend(l, {'value' : v + 20})})
        call s:wait_has_key(l, 'value')
        Assert Equals(value, 62)
        Assert Equals(p2._state, FULFILLED)
      End

      It should resolve the same rejected promise multiple times asynchronously
        let l = l:
        let value = 100
        let p1 = RejectAfter(50)
        let p2 = p1.catch({v -> extend(l, {'value' : l.value + 100, 'ok1' : v:true})})
        let p3 = p1.catch({v -> extend(l, {'value' : l.value + 100, 'ok2' : v:true})})
        for p in [p1, p2, p3]
          Assert Equals(p._state, PENDING)
        endfor
        call s:wait_has_key(l, 'ok1')
        call s:wait_has_key(l, 'ok2')
        Assert Equals(p1._state, REJECTED)
        for p in [p2, p3]
          Assert Equals(p._state, FULFILLED)
        endfor
        Assert Equals(value, 300)
      End

      It should reject Promise when an exception was thrown
        let l = l:

        let p = P.reject(42).catch({-> execute('throw "ERROR"')})
        call p.catch({exc -> extend(l, {'reason': exc})})
        call s:wait_has_key(l, 'reason')
        Assert Equals(p._state, REJECTED)
        Assert HasKey(reason, 'exception')
        Assert HasKey(reason, 'throwpoint')
        Assert Equals(reason.exception, 'ERROR')
        unlet reason

        let p = P.reject(42).catch({-> execute('echom dummy')})
        call p.catch({exc -> extend(l, {'reason': exc})})
        call s:wait_has_key(l, 'reason')
        Assert Equals(p._state, REJECTED)
        Assert HasKey(reason, 'exception')
        Assert HasKey(reason, 'throwpoint')
        Assert Match(reason.exception, '^Vim(echomsg):E121:')
      End

      It should pass through the exception when all parameters are omitted
        let l = l:
        let p = P.reject(42).catch().catch()
        call p.catch({x -> extend(l, {'reason' : x})})
        call s:wait_has_key(l, 'reason')
        Assert Equals(p._state, REJECTED)
        Assert Equals(reason, 42)
      End
    End

    Describe .finally()
      It should call its callback and propagate its parent's value when resolved
        let l = l:
        for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty')]
          let p = P.resolve(l:Val).finally({-> extend(l, {'On_resolved': Val})})
          call p.then({x -> extend(l, {'Result': x})})
          call s:wait_has_key(l, 'Result')
          Assert HasKey(l, 'On_resolved')
          Assert Equals(p._state, FULFILLED)
          Assert Equals(Result, Val)
          Assert Equals(l.On_resolved, Val)
          unlet l:Val
          unlet l:On_resolved
          unlet l:Result
        endfor
      End

      It should call its callback and propagate its parent's value when rejected
        let l = l:
        for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty')]
          let p = P.reject(l:Val).finally({-> extend(l, {'On_rejected': Val})})
          call p.catch({x -> extend(l, {'Err': x})})
          call s:wait_has_key(l, 'Err')
          Assert HasKey(l, 'On_rejected')
          Assert Equals(p._state, REJECTED)
          Assert Equals(Err, Val)
          Assert Equals(l.On_rejected, Val)
          unlet l:Val
          unlet l:On_rejected
          unlet l:Err
        endfor
      End

      It should just propagates a resolved value when no argument given
        let l = l:
        let p = P.resolve(42).finally()
        call p.then({x -> extend(l, {'result': x})})
        call s:wait_has_key(l, 'result')
        Assert Equals(p._state, FULFILLED)
        Assert Equals(l.result, 42)
      End

      It should just propagates a rejected value when no argument given
        let l = l:
        let p = P.reject('ERROR!').finally()
        call p.catch({x -> extend(l, {'err': x})})
        call s:wait_has_key(l, 'err')
        Assert Equals(p._state, REJECTED)
        Assert Equals(l.err, 'ERROR!')
      End

      It should not pass parent's result to its callback
        let l = l:
        let p = P.resolve(42).finally({x -> extend(l, {'on_finally': x})})
        call p.catch({e -> extend(l, {'err': e})})
        call s:wait_has_key(l, 'err')
        Assert Equals(p._state, REJECTED)
        Assert KeyNotExists(l, 'on_finally')
        Assert HasKey(err, 'throwpoint')
        Assert Equals(stridx(err.exception, 'Vim(call):E119:'), 0, err.exception)
      End

      It should return rejected promise when an exception is thrown in its callback
        let l = l:
        let p = P.resolve(42).finally({-> execute('throw "Exception in onFinally"')})
        call p.catch({e -> extend(l, {'err': e})})
        call s:wait_has_key(l, 'err')
        Assert Equals(p._state, REJECTED)
        Assert HasKey(err, 'throwpoint')
        Assert Equals(err.exception, 'Exception in onFinally')
      End
    End
  End

  Describe .all()
    It should wait all and resolve with all the resolved values as array
      let l = l:
      let p1 = Wait(10).then({-> 10})
      let p2 = Wait(200).then({-> 20})
      let p3 = Wait(100).then({-> extend(l, {'ongoing' : v:true})}).then({-> 30})
      let result = []
      let p4 = P.all([p1, p2, p3]).then({a -> extend(l, {'result' : a, 'done' : v:true})})
      call s:wait_has_key(l, 'ongoing')
      Assert Equals(result, [])
      Assert Equals(p4._state, PENDING)
      call s:wait_has_key(l, 'done')
      Assert Equals(len(result), 3)
      Assert Equals(result[0], 10)
      Assert Equals(result[1], 20)
      Assert Equals(result[2], 30)
      Assert Equals(p4._state, FULFILLED)
    End

    It should reject Promise immediately when one of children was rejected
      let l = l:
      let p1 = Wait(10).then({ -> execute('throw 1') })
      let p2 = Wait(200)
      let p3 = P.all([p1, p2]).catch({r -> extend(l, {'reason' : r})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason.exception, 1)
      Assert Equals(p3._state, FULFILLED)
      Assert Equals(p2._state, PENDING)
    End

    It should create a pending Promise when given array is empty
      let l = l:
      let p = P.all([]).then({-> extend(l, {'done' : 1})})
      call s:wait_has_key(l, 'done')
      Assert Equals(p._state, FULFILLED)
      Assert Equals(done, 1)
    End

    It should work where filfilled and pending Promises are mixed
      let l = l:
      let p1 = P.resolve('a')
      let p2 = Wait(30).then({-> 'b'})
      let p3 = Wait(10).then({-> 'c'})
      let p = P.all([p1, p2, p3])
      Assert Equals(p._state, PENDING)
      call p.then({a -> extend(l, {'result' : a})})
      call s:wait_has_key(l, 'result')
      Assert Equals(len(result), 3)
      Assert Equals(result[0], 'a')
      Assert Equals(result[1], 'b')
      Assert Equals(result[2], 'c')
    End
  End

  Describe .race()
    It should make a promise resolving after first of children resolved
      let l = l:
      let p1 = Wait(10).then({-> 42})
      let p2 = Wait(200).then({-> 21})
      let p4 = P.race([p1, p2]).then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 42)
      Assert Equals(p4._state, FULFILLED)
      Assert Equals(p2._state, PENDING)
    End

    It should reject promise immediately when first child was rejected
      let l = l:
      let p1 = Wait(10).then({ -> execute('throw 1') })
      let p2 = Wait(200)
      let p3 = P.race([p1, p2]).catch({r -> extend(l, {'reason' : r})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason.exception, 1)
      Assert Equals(p1._state, REJECTED)
      Assert Equals(p2._state, PENDING)
      Assert Equals(p3._state, FULFILLED)
    End

    It should resolve promise even if succeeding promise is rejected
      let l = l:
      let p1 = Wait(10).then({-> 42})
      let p2 = RejectAfter(200)
      let p3 = P.race([p1, p2]).then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 42)
      Assert Equals(p3._state, FULFILLED)
      Assert Equals(p2._state, PENDING)
    End

    It should create a pending Promise when given array is empty
      let p = P.race([])
      Assert Equals(p._state, PENDING)
    End

    It should work where filfilled and pending Promises are mixed
      let p1 = Wait(10).then({-> 'a'})
      let p2 = P.resolve('b')
      let p3 = Wait(50).then({-> 'c'})
      let p = P.race([p1, p2, p3])

      let l = l:
      call p.then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(p._state, FULFILLED)
      Assert Equals(result, 'b')
    End
  End

  Describe .resolve()
    It should create resolved Promise with given non-Promise value
      let l = l:
      for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty'), v:null, v:true]
        let p = P.resolve(Val)
        Assert Equals(p._state, FULFILLED)
        call p.then({x -> extend(l, {'Result' : x})}).catch({x -> extend(l, {'Result' : x})})
        call s:wait_has_key(l, 'Result')
        Assert Equals(l:Result, Val)
        unlet l:Result
        unlet l:Val
      endfor
    End

    It should create resolved Promise with given Promise value
      for p in [
      \   P.resolve(P.resolve(42)),
      \   P.resolve(P.resolve(P.resolve(P.resolve(42)))),
      \   P.resolve(Wait(10).then({-> 42}))
      \ ]
        let l = l:
        call p.then({x -> extend(l, {'result' : x})})
        call s:wait_has_key(l, 'result')
        Assert Equals(p._state, FULFILLED)
        Assert Equals(result, 42)
        unlet result
      endfor
    End

    It should create rejected Promise with rejected Promise value
      let p = P.resolve(P.reject(42))
      Assert Equals(p._state, REJECTED)
      let l = l:
      call p.catch({x -> extend(l, {'reason' : x})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(reason, 42)
    End

    It should create pending Promise with pending Promise
      let p = P.resolve(P.new({-> 42}))
      Assert Equals(p._state, PENDING)
    End

    It can omit parameter
      let l = l:
      call P.resolve().then({x -> extend(l, {'result': x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, v:null)
    End

    It should wait for given pending Promise being resolved
      let l = l:
      let p = P.resolve(Wait(30).then({-> 42}))
      Assert Equals(p._state, PENDING)
      call p.then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 42)
    End

    It should wait for given pending Promise being rejected
      let l = l:
      let p = P.resolve(Wait(30).then({-> execute('throw "error"')}))
      Assert Equals(p._state, PENDING)
      call p.catch({x -> extend(l, {'reason' : x})})
      call s:wait_has_key(l, 'reason')
      Assert Equals(p._state, REJECTED)
      Assert Equals(reason.exception, 'error')
    End
  End

  Describe .reject()
    It should create rejected Promise with non-Promise value
      let l = l:
      for l:Val in [42, 'foo', {'foo': 42}, {}, [1, 2, 3], [], function('empty'), v:null, v:true]
        let p = P.reject(Val)
        Assert Equals(p._state, REJECTED)
        call p.then({-> extend(l, {'Result' : 'Error: resolve to .then()'})}).catch({x -> extend(l, {'Result' : x})})
        call s:wait_has_key(l, 'Result')
        Assert Equals(Result, Val)
        unlet l:Result
        unlet l:Val
      endfor
    End

    It should create rejected Promise with rejected Promise
      for p in [
      \  P.reject(P.reject(42)),
      \  P.reject(P.reject(P.reject(P.reject(42)))),
      \  P.reject(Wait(10).then({-> P.reject(42)})),
      \  P.reject(Wait(10).then({-> execute('throw 42')})),
      \ ]
        Assert Equals(p._state, REJECTED)
      endfor
    End

    It should create rejected Promise with pending Promise
      let p = P.reject(P.new({-> 42}))
      Assert Equals(p._state, REJECTED)
    End

    It should create rejected Promise with resolved Promise
      let l = l:
      let p = P.reject(P.resolve(42))
      Assert Equals(p._state, REJECTED)
      call p.catch({x -> x}).then({x -> extend(l, {'result' : x})})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 42)
    End

    It can omit parameter
      let l = l:
      call P.reject().catch({x -> extend(l, {'reason': x})})
      call s:wait_has_key(l, 'reason')
      Assert True(reason == v:null, 'Actual: ' . string(reason))
    End
  End

  Describe .is_available()
    It should return true on Vim8 or Neovim
      Assert True(P.is_available())
    End
  End

  Describe .is_promise()
    It should return a given value is Promise instance or not
      Assert True(P.is_promise(P.resolve(42)))
      Assert False(P.is_promise({}))
      Assert False(P.is_promise(v:null))
      Assert False(P.is_promise(42))
    End
  End

  Describe .wait()
    It waits until a given promise has resolved and returns a result
      let p = Wait(30).then({ -> 'resolved' })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      Assert Equals(P.wait(p), ['resolved', v:null])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 30)
      Assert Compare(done, '<=', 1000)
    End

    It throws an exception when a given promise has rejected
      let p = Wait(30).then({ -> P.reject('rejected') })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      Assert Equals(P.wait(p), [v:null, 'rejected'])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 30)
      Assert Compare(done, '<=', 1000)

      let p = Wait(30).then({ -> P.reject({ 'exception': 'rejected' }) })
      Assert Equals(P.wait(p), [v:null, { 'exception': 'rejected' }])

      let p = Wait(30).then({ -> P.reject(['foo', 'bar']) })
      Assert Equals(P.wait(p), [v:null, ['foo', 'bar']])
    End

    It waits until a given timeout and returns Async.Promise.TimeoutError
      let p = Wait(1000).then({ -> 'resolved' })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      Assert Equals(P.wait(p, { 'timeout': 30 }), [v:null, P.TimeoutError])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 30)
      Assert Compare(done, '<=', 1000)
    End

    It waits until a given timeout and returns Async.Promise.TimeoutError (type 2)
      let p = Wait(1000).then({ -> 'resolved' })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      Assert Equals(P.wait(p, 30), [v:null, P.TimeoutError])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 30)
      Assert Compare(done, '<=', 1000)
    End

    It waits at least the interval milliseconds (interval > epoch)
      let p = Wait(200).then({ -> 'resolved' })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      " 1050 for Timer accuracy; 1000m sleep result 995m to 1005m in Windows
      Assert Equals(P.wait(p, { 'interval': 1050 }), ['resolved', v:null])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 1000)
      Assert Compare(done, '<=', 2000)

      let p = Wait(200).then({ -> P.reject('rejected') })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      " 1050 for Timer accuracy; 1000m sleep result 995m to 1005m in Windows
      Assert Equals(P.wait(p, { 'interval': 1050 }), [v:null, 'rejected'])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 1000)
      Assert Compare(done, '<=', 2000)
    End

    It waits at least the interval milliseconds (interval < epoch)
      let p = Wait(1000).then({ -> 'resolved' })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      " Timer accuracy fixing need
      Assert Equals(P.wait(p, { 'interval': 340 }), ['resolved', v:null])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 1000)
      if has('mac')
        " TODO: I know this is a terrible IDEA, but this assert makes osx test fails.
        " Let's disable until we figure out why and how.
      else
      	Assert Compare(done, '<=', 1360)
      endif

      let p = Wait(1000).then({ -> P.reject('rejected') })
      let s = reltime()
      Assert Equals(p._state, PENDING)
      " Timer accuracy fixing need
      Assert Equals(P.wait(p, { 'interval': 340 }), [v:null, 'rejected'])
      let done = reltimefloat(reltime(s)) * 1000
      Assert Compare(done, '>=', 1000)
      if has('mac')
        " TODO: I know this is a terrible IDEA, but this assert makes osx test fails.
        " Let's disable until we figure out why and how.
      else
      	Assert Compare(done, '<=', 1360)
      endif
    End
  End

  Describe .chain()
    It returns a promise which resolves to an empty List when an empty factories has specified
      let l = l:
      let p = P.chain([]).then({ v -> extend(l, { 'result': v })})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, [])
      Assert Equals(p._state, FULFILLED)
    End

    It sequentially calls functions in factories and resolves promises
      let l = l:
      let fs = [
            \ { -> P.resolve('Hello') },
            \ { -> P.resolve('World') },
            \ { -> P.resolve('Goodbye') },
            \]
      let p = P.chain(fs).then({ v -> extend(l, { 'result': v })})
      call s:wait_has_key(l, 'result')
      Assert Equals(result, ['Hello', 'World', 'Goodbye'])
      Assert Equals(p._state, FULFILLED)
    End

    It sequentially calls functions in factories but reject promises if intermediate function call fails
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let fs = [
            \ { -> P.resolve('Hello').then({ -> extend(l, { 'Hello': 1 }) }) },
            \ { -> execute('throw HOGE') },
            \ { -> P.resolve('Goodbye').then({ -> extend(l, { 'Goodbye': 1 }) }) },
            \]
      let p = P.chain(fs).then({ -> execute('throw "error"') })
      call s:wait_has_key(l, 'result')
      Assert HasKey(result, 'exception')
      Assert HasKey(result, 'throwpoint')
      Assert Equals(p._state, REJECTED)
      Assert HasKey(l, 'Hello')
      Assert KeyNotExists(l, 'Goodbye')
    End

    It sequentially calls functions in factories but reject promises if intermediate promise reject
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let fs = [
            \ { -> P.resolve('Hello').then({ -> extend(l, { 'Hello': 1 }) }) },
            \ { -> P.resolve('World').then({ -> extend(l, { 'World': 1 }) }).then({ -> P.reject('Wow')}) },
            \ { -> P.resolve('Goodbye').then({ -> extend(l, { 'Goodbye': 1 }) }) },
            \]
      let p = P.chain(fs).then({ -> execute('throw "error"') })
      call s:wait_has_key(l, 'result')
      Assert Equals(result, 'Wow')
      Assert Equals(p._state, REJECTED)
      Assert HasKey(l, 'Hello')
      Assert HasKey(l, 'World')
      Assert KeyNotExists(l, 'Goodbye')
    End

    It sequentially calls functions in factories beyonds &maxfuncdepth and resolves promises
      let l = l:
      let fs = map(
           \ range(&maxfuncdepth * 2),
           \ { k -> { -> P.new({r -> r(k) }) } },
           \)
      let p = P.chain(fs).then({ v -> extend(l, { 'result': v })})
      call s:wait_has_key(l, 'result')
      Assert Equals(len(result), &maxfuncdepth * 2)
      Assert Equals(result, range(&maxfuncdepth * 2))
      Assert Equals(p._state, FULFILLED)
    End
  End

  Describe .on_unhandled_rejection

    After each
      call P.on_unhandled_rejection(P.noop)
    End

    It should call when promise throw error but unhandled
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.resolve().then({ -> execute('throw "error"') })
      call s:wait_has_key(l, 'result')
      Assert HasKey(result, 'exception')
      Assert HasKey(result, 'throwpoint')
    End

    It should call when promise rejected but unhandled
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.reject({ 'error': 'error' })
      call s:wait_has_key(l, 'result')
      Assert HasKey(result, 'error')
      Assert Equals(result.error, 'error')
    End

    It should call when promise does not catch with finally
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.resolve().then({ -> execute('throw "error"') }).finally({ -> {} })
      call s:wait_has_key(l, 'result')
      Assert HasKey(result, 'exception')
      Assert HasKey(result, 'throwpoint')
    End

    It should call when promise does not catch with children
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.resolve().then({ -> execute('throw "error"') }).then({ -> {} })
      call s:wait_has_key(l, 'result')
      Assert HasKey(result, 'exception')
      Assert HasKey(result, 'throwpoint')
    End

    It should call when promise does not catch with wait
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.resolve().then({ -> execute('throw "error"') }).then({ -> {} })
      let [_, error] = P.wait(p)
      Assert Equals(error, result)
    End

    It should not call when catched rejected promise
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.reject({ 'error': 'error' }).catch({ -> {} })
      call P.wait(Wait(100))
      Assert KeyNotExists(l, 'result')
    End

    It should not call when catched thrown error
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.resolve().then({ -> execute('throw "error"') }).catch({ -> {} })
      call P.wait(Wait(100))
      Assert KeyNotExists(l, 'result')
    End

    It should not call when promise does not throw error
      let l = l:
      call P.on_unhandled_rejection({ result -> extend(l, { 'result': result }) })

      let p = P.resolve().then({ -> { 'success': 'success' } })
      call P.wait(Wait(100))
      Assert KeyNotExists(l, 'result')
    End
  End
End

" vim:et ts=2 sts=2 sw=2 tw=0:
